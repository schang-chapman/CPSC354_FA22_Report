// is_empty
let rec is_empty = \x.
    if x=# then 1 else 0
    in
    is_empty #

;;

// fib
let rec fib = \x.
    if x = 0 then 0
    else if x = 1 then 1
    else fib (x - 1) + fib (x - 2)
    in
    fib 6

;;

// length
let rec length = \x.
    if x=# then 0
    else length (tl x) + 1
    in
    length a:b:c:#

;;

// even
let rec even = \x.
    if x=# then 1
    else if (tl x)=# then 0
    else even (tl tl x)
    in
    even a:b:c:#

;;

// append
let rec append = \x. \y.
    if x=# then y:#
    else (hd x) : (append (tl x) y)
    in
// reverse
let rec reverse = \x.
    if x=# then x
    else append (reverse (tl x)) (hd x)  
    in
    reverse a:b:c:#

;;

// weave
let rec weave = \x. \y.
    if x=# then y
    else if y=# then x
    else (hd x) : (hd y) : (weave (tl x) (tl y))
    in
    weave a:b:c:# d:e:f:#