-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from ParLambdaNat.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pExp1 -> Exp1                               (1)
	%start_pExp2 -> Exp2                               (2)
	%start_pExp3 -> Exp3                               (3)
	%start_pExp4 -> Exp4                               (4)
	%start_pExp5 -> Exp5                               (5)
	%start_pExp -> Exp                                 (6)
	Id -> L_Id                                         (7)
	Program -> Exp                                     (8)
	Exp1 -> '\\' Id '.' Exp                            (9)
	Exp1 -> Exp2                                       (10)
	Exp2 -> 'if' Exp '=' Exp 'then' Exp 'else' Exp     (11)
	Exp2 -> 'let' Id '=' Exp 'in' Exp                  (12)
	Exp2 -> 'let' 'rec' Id '=' Exp 'in' Exp            (13)
	Exp2 -> 'minus_one' Exp                            (14)
	Exp2 -> Exp3                                       (15)
	Exp3 -> Exp3 Exp4                                  (16)
	Exp3 -> Exp4                                       (17)
	Exp4 -> '0'                                        (18)
	Exp4 -> 'S' Exp4                                   (19)
	Exp4 -> '(' Exp ')'                                (20)
	Exp5 -> Id                                         (21)
	Exp -> Exp1                                        (22)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'.'            { PT _ (TS _ 3) }
	'0'            { PT _ (TS _ 4) }
	'='            { PT _ (TS _ 5) }
	'S'            { PT _ (TS _ 6) }
	'\\'           { PT _ (TS _ 7) }
	'else'         { PT _ (TS _ 8) }
	'if'           { PT _ (TS _ 9) }
	'in'           { PT _ (TS _ 10) }
	'let'          { PT _ (TS _ 11) }
	'minus_one'    { PT _ (TS _ 12) }
	'rec'          { PT _ (TS _ 13) }
	'then'         { PT _ (TS _ 14) }
	L_Id           { PT _ (T_Id $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pExp1    rule  1
	%start_pExp2    rule  2
	%start_pExp3    rule  3
	%start_pExp4    rule  4
	%start_pExp5    rule  5
	%start_pExp     rule  6
	Id              rule  7
	Program         rule  8
	Exp1            rules 9, 10
	Exp2            rules 11, 12, 13, 14, 15
	Exp3            rules 16, 17
	Exp4            rules 18, 19, 20
	Exp5            rule  21
	Exp             rule  22

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'\\'           shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'minus_one'    shift, and enter state 20

	Program        goto state 27
	Exp1           goto state 9
	Exp2           goto state 10
	Exp3           goto state 11
	Exp4           goto state 12
	Exp            goto state 28

State 1

	%start_pExp1 -> . Exp1                              (rule 1)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'\\'           shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'minus_one'    shift, and enter state 20

	Exp1           goto state 26
	Exp2           goto state 10
	Exp3           goto state 11
	Exp4           goto state 12

State 2

	%start_pExp2 -> . Exp2                              (rule 2)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'minus_one'    shift, and enter state 20

	Exp2           goto state 25
	Exp3           goto state 11
	Exp4           goto state 12

State 3

	%start_pExp3 -> . Exp3                              (rule 3)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16

	Exp3           goto state 24
	Exp4           goto state 12

State 4

	%start_pExp4 -> . Exp4                              (rule 4)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16

	Exp4           goto state 23

State 5

	%start_pExp5 -> . Exp5                              (rule 5)

	L_Id           shift, and enter state 8

	Id             goto state 21
	Exp5           goto state 22

State 6

	%start_pExp -> . Exp                                (rule 6)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'\\'           shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'minus_one'    shift, and enter state 20

	Exp1           goto state 9
	Exp2           goto state 10
	Exp3           goto state 11
	Exp4           goto state 12
	Exp            goto state 13

State 7

	Id -> . L_Id                                        (rule 7)

	L_Id           shift, and enter state 8


State 8

	Id -> L_Id .                                        (rule 7)

	'.'            reduce using rule 7
	'='            reduce using rule 7
	%eof           reduce using rule 7


State 9

	Exp -> Exp1 .                                       (rule 22)

	')'            reduce using rule 22
	'='            reduce using rule 22
	'else'         reduce using rule 22
	'in'           reduce using rule 22
	'then'         reduce using rule 22
	%eof           reduce using rule 22


State 10

	Exp1 -> Exp2 .                                      (rule 10)

	')'            reduce using rule 10
	'='            reduce using rule 10
	'else'         reduce using rule 10
	'in'           reduce using rule 10
	'then'         reduce using rule 10
	%eof           reduce using rule 10


State 11

	Exp2 -> Exp3 .                                      (rule 15)
	Exp3 -> Exp3 . Exp4                                 (rule 16)

	'('            shift, and enter state 14
	')'            reduce using rule 15
	'0'            shift, and enter state 15
	'='            reduce using rule 15
	'S'            shift, and enter state 16
	'else'         reduce using rule 15
	'in'           reduce using rule 15
	'then'         reduce using rule 15
	%eof           reduce using rule 15

	Exp4           goto state 29

State 12

	Exp3 -> Exp4 .                                      (rule 17)

	'('            reduce using rule 17
	')'            reduce using rule 17
	'0'            reduce using rule 17
	'='            reduce using rule 17
	'S'            reduce using rule 17
	'else'         reduce using rule 17
	'in'           reduce using rule 17
	'then'         reduce using rule 17
	%eof           reduce using rule 17


State 13

	%start_pExp -> Exp .                                (rule 6)

	%eof           accept


State 14

	Exp4 -> '(' . Exp ')'                               (rule 20)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'\\'           shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'minus_one'    shift, and enter state 20

	Exp1           goto state 9
	Exp2           goto state 10
	Exp3           goto state 11
	Exp4           goto state 12
	Exp            goto state 36

State 15

	Exp4 -> '0' .                                       (rule 18)

	'('            reduce using rule 18
	')'            reduce using rule 18
	'0'            reduce using rule 18
	'='            reduce using rule 18
	'S'            reduce using rule 18
	'else'         reduce using rule 18
	'in'           reduce using rule 18
	'then'         reduce using rule 18
	%eof           reduce using rule 18


State 16

	Exp4 -> 'S' . Exp4                                  (rule 19)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16

	Exp4           goto state 35

State 17

	Exp1 -> '\\' . Id '.' Exp                           (rule 9)

	L_Id           shift, and enter state 8

	Id             goto state 34

State 18

	Exp2 -> 'if' . Exp '=' Exp 'then' Exp 'else' Exp    (rule 11)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'\\'           shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'minus_one'    shift, and enter state 20

	Exp1           goto state 9
	Exp2           goto state 10
	Exp3           goto state 11
	Exp4           goto state 12
	Exp            goto state 33

State 19

	Exp2 -> 'let' . Id '=' Exp 'in' Exp                 (rule 12)
	Exp2 -> 'let' . 'rec' Id '=' Exp 'in' Exp           (rule 13)

	'rec'          shift, and enter state 32
	L_Id           shift, and enter state 8

	Id             goto state 31

State 20

	Exp2 -> 'minus_one' . Exp                           (rule 14)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'\\'           shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'minus_one'    shift, and enter state 20

	Exp1           goto state 9
	Exp2           goto state 10
	Exp3           goto state 11
	Exp4           goto state 12
	Exp            goto state 30

State 21

	Exp5 -> Id .                                        (rule 21)

	%eof           reduce using rule 21


State 22

	%start_pExp5 -> Exp5 .                              (rule 5)

	%eof           accept


State 23

	%start_pExp4 -> Exp4 .                              (rule 4)

	%eof           accept


State 24

	%start_pExp3 -> Exp3 .                              (rule 3)
	Exp3 -> Exp3 . Exp4                                 (rule 16)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	%eof           accept

	Exp4           goto state 29

State 25

	%start_pExp2 -> Exp2 .                              (rule 2)

	%eof           accept


State 26

	%start_pExp1 -> Exp1 .                              (rule 1)

	%eof           accept


State 27

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 28

	Program -> Exp .                                    (rule 8)

	%eof           reduce using rule 8


State 29

	Exp3 -> Exp3 Exp4 .                                 (rule 16)

	'('            reduce using rule 16
	')'            reduce using rule 16
	'0'            reduce using rule 16
	'='            reduce using rule 16
	'S'            reduce using rule 16
	'else'         reduce using rule 16
	'in'           reduce using rule 16
	'then'         reduce using rule 16
	%eof           reduce using rule 16


State 30

	Exp2 -> 'minus_one' Exp .                           (rule 14)

	')'            reduce using rule 14
	'='            reduce using rule 14
	'else'         reduce using rule 14
	'in'           reduce using rule 14
	'then'         reduce using rule 14
	%eof           reduce using rule 14


State 31

	Exp2 -> 'let' Id . '=' Exp 'in' Exp                 (rule 12)

	'='            shift, and enter state 41


State 32

	Exp2 -> 'let' 'rec' . Id '=' Exp 'in' Exp           (rule 13)

	L_Id           shift, and enter state 8

	Id             goto state 40

State 33

	Exp2 -> 'if' Exp . '=' Exp 'then' Exp 'else' Exp    (rule 11)

	'='            shift, and enter state 39


State 34

	Exp1 -> '\\' Id . '.' Exp                           (rule 9)

	'.'            shift, and enter state 38


State 35

	Exp4 -> 'S' Exp4 .                                  (rule 19)

	'('            reduce using rule 19
	')'            reduce using rule 19
	'0'            reduce using rule 19
	'='            reduce using rule 19
	'S'            reduce using rule 19
	'else'         reduce using rule 19
	'in'           reduce using rule 19
	'then'         reduce using rule 19
	%eof           reduce using rule 19


State 36

	Exp4 -> '(' Exp . ')'                               (rule 20)

	')'            shift, and enter state 37


State 37

	Exp4 -> '(' Exp ')' .                               (rule 20)

	'('            reduce using rule 20
	')'            reduce using rule 20
	'0'            reduce using rule 20
	'='            reduce using rule 20
	'S'            reduce using rule 20
	'else'         reduce using rule 20
	'in'           reduce using rule 20
	'then'         reduce using rule 20
	%eof           reduce using rule 20


State 38

	Exp1 -> '\\' Id '.' . Exp                           (rule 9)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'\\'           shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'minus_one'    shift, and enter state 20

	Exp1           goto state 9
	Exp2           goto state 10
	Exp3           goto state 11
	Exp4           goto state 12
	Exp            goto state 45

State 39

	Exp2 -> 'if' Exp '=' . Exp 'then' Exp 'else' Exp    (rule 11)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'\\'           shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'minus_one'    shift, and enter state 20

	Exp1           goto state 9
	Exp2           goto state 10
	Exp3           goto state 11
	Exp4           goto state 12
	Exp            goto state 44

State 40

	Exp2 -> 'let' 'rec' Id . '=' Exp 'in' Exp           (rule 13)

	'='            shift, and enter state 43


State 41

	Exp2 -> 'let' Id '=' . Exp 'in' Exp                 (rule 12)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'\\'           shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'minus_one'    shift, and enter state 20

	Exp1           goto state 9
	Exp2           goto state 10
	Exp3           goto state 11
	Exp4           goto state 12
	Exp            goto state 42

State 42

	Exp2 -> 'let' Id '=' Exp . 'in' Exp                 (rule 12)

	'in'           shift, and enter state 48


State 43

	Exp2 -> 'let' 'rec' Id '=' . Exp 'in' Exp           (rule 13)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'\\'           shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'minus_one'    shift, and enter state 20

	Exp1           goto state 9
	Exp2           goto state 10
	Exp3           goto state 11
	Exp4           goto state 12
	Exp            goto state 47

State 44

	Exp2 -> 'if' Exp '=' Exp . 'then' Exp 'else' Exp    (rule 11)

	'then'         shift, and enter state 46


State 45

	Exp1 -> '\\' Id '.' Exp .                           (rule 9)

	')'            reduce using rule 9
	'='            reduce using rule 9
	'else'         reduce using rule 9
	'in'           reduce using rule 9
	'then'         reduce using rule 9
	%eof           reduce using rule 9


State 46

	Exp2 -> 'if' Exp '=' Exp 'then' . Exp 'else' Exp    (rule 11)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'\\'           shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'minus_one'    shift, and enter state 20

	Exp1           goto state 9
	Exp2           goto state 10
	Exp3           goto state 11
	Exp4           goto state 12
	Exp            goto state 51

State 47

	Exp2 -> 'let' 'rec' Id '=' Exp . 'in' Exp           (rule 13)

	'in'           shift, and enter state 50


State 48

	Exp2 -> 'let' Id '=' Exp 'in' . Exp                 (rule 12)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'\\'           shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'minus_one'    shift, and enter state 20

	Exp1           goto state 9
	Exp2           goto state 10
	Exp3           goto state 11
	Exp4           goto state 12
	Exp            goto state 49

State 49

	Exp2 -> 'let' Id '=' Exp 'in' Exp .                 (rule 12)

	')'            reduce using rule 12
	'='            reduce using rule 12
	'else'         reduce using rule 12
	'in'           reduce using rule 12
	'then'         reduce using rule 12
	%eof           reduce using rule 12


State 50

	Exp2 -> 'let' 'rec' Id '=' Exp 'in' . Exp           (rule 13)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'\\'           shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'minus_one'    shift, and enter state 20

	Exp1           goto state 9
	Exp2           goto state 10
	Exp3           goto state 11
	Exp4           goto state 12
	Exp            goto state 53

State 51

	Exp2 -> 'if' Exp '=' Exp 'then' Exp . 'else' Exp    (rule 11)

	'else'         shift, and enter state 52


State 52

	Exp2 -> 'if' Exp '=' Exp 'then' Exp 'else' . Exp    (rule 11)

	'('            shift, and enter state 14
	'0'            shift, and enter state 15
	'S'            shift, and enter state 16
	'\\'           shift, and enter state 17
	'if'           shift, and enter state 18
	'let'          shift, and enter state 19
	'minus_one'    shift, and enter state 20

	Exp1           goto state 9
	Exp2           goto state 10
	Exp3           goto state 11
	Exp4           goto state 12
	Exp            goto state 54

State 53

	Exp2 -> 'let' 'rec' Id '=' Exp 'in' Exp .           (rule 13)

	')'            reduce using rule 13
	'='            reduce using rule 13
	'else'         reduce using rule 13
	'in'           reduce using rule 13
	'then'         reduce using rule 13
	%eof           reduce using rule 13


State 54

	Exp2 -> 'if' Exp '=' Exp 'then' Exp 'else' Exp .    (rule 11)

	')'            reduce using rule 11
	'='            reduce using rule 11
	'else'         reduce using rule 11
	'in'           reduce using rule 11
	'then'         reduce using rule 11
	%eof           reduce using rule 11


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 23
Number of terminals: 15
Number of non-terminals: 15
Number of states: 55
