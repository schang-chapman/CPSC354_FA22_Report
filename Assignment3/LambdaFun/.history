:quit
sort (cons 6 (cons 4 (cons 2 nil)));;
:load test/sort.lc
:env
sort (cons 6 (cons 4 (cons 2 nil)));;
:load test/sort.lc
sort (cons 6 (cons 4 (cons 2 nil)));;
:load test/sort.lc
sort (cons 6 (cons 4 (cons 2 nil)));;
:load test/sort.lc
sort (cons 6 (cons 4 (cons 2 nil)));;
:load test/sort.lc
sort (cons 6 (cons 4 (cons 2 nil)));;
:load test/sort.lc
sort (cons 6 (cons 4 (cons 2 nil)));;
:load test/sort.lc
sort (cons 6 (cons 4 (cons 2 nil)));;
:load test/sort.lc
sort (cons 6 (cons 4 (cons 2 nil)));;
sort (cons 6 (cons 4 (cons 2 nil)));;
:load test/sort.lc
sort (cons 6 (cons 4 (cons 2 nil)));;
:load test/sort.lc
print nil;;
print !nil;;
print !nil
:load test/linked-list.lc
sort (cons 6 (cons 4 (cons 2 nil)));;
:load test/sort.lc
sort (cons 6 (cons 4 (cons 2 nil)));;
:load test/sort.lc
:load test/sort.lc
:quit
:reload sort.lc;;
:env
insert nil (cons 3 (cons 2 (cons 1 nil)));;
:reload sort.lc;;
:env
cons 3 (cons 2 (cons 1 nil));;
cons 3 (cons 2 (cons 1 nil)));;
:reload sort.lc;;
:env
insert 5 (cons 3 (cons 2 (cons 1 nil)));;
:reload sort.lc;;
:env
insert 5 (cons 3 (cons 2 (cons 1 nil)));;
:env
insert 5 (cons 3 (cons 2 (cons 1)));;
:env
:help
:load test/sort.lc
:load test/sort.lc;;
:load test/sort.lc;;
:load test/sort.lc
lengthRec [1,2,3];;
lengthRec (cons 3 (cons 2 (cons 1 nil)));;
:env
length (cons 3 (cons 2 (cons 1 nil)));;
length [6, <address 5>];;
length 0;;
length 6;;
length <6>;;
length <address 6>;;
:env
length :=6;;
length 6;;
cons 6 (cons 5 (cons 4 (cons 3 (cons 2 (cons 1 nil))))) ;;
:load test/linked-list.lc
:load linked-list.lc
:load test/sort.lc
:load test/sort.lc
:quit
print (insert 1 nil);;
:load test/sort.lc
:quit
print (insert 1 nil);;
:env
insert 1 nil;;
:load test/sort.lc
:quit
insert 1 nil;;
print (insert 1 nil);;
:load test/sort.lc
:load test/sort.lc
:load test/sort.lc
:load test/sort.lc
:quit
weave [1,2,3] [4,5,6];;
append [1,2,3] [4,5,6];;
reverse [0,1,2,3] ;;
:load test/solutions.lc
:load test/solutions.lc
weave [1,2,3] [4,5,6];;
:load test/solutions.lc
weave [1,2,3] [4,5,6];;
:load test/solutions.lc
:load test/solutions.lc
weave [1,2,3] [4,5,6];;
weave [1,2,3] [4,5,6];;
weave [1,2,3] [4,5,6];;
