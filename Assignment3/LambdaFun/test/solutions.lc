val empty = \x.
    case x of {
        [] -> 1,
        (a:as) -> 0
    };;

rec fib = \x.
    case x of {
        0 -> 0,
        1 -> 1,
        _ -> fib (x-1) + fib (x-2) 
    };;

rec length = \x.
    case x of {
        [] -> 0,
        (a:as) -> (length as)+1
    };;

rec even = \x.
    case x of {
        [] -> 1,
        (a:as) -> case as of {
            [] -> 0,
            (b:bs) -> even bs
        }
    };;

rec append = \x. \y.
    case x of {
        [] -> [y],
        (a:as) -> a:(append as y)
    };;

rec reverse = \x.
    case x of {
        [] -> x,
        (a:as) -> append (reverse as) a
    };;